name: Android Test

on:
  workflow_dispatch:

jobs:
  build-android-manual:
    name: Build Android APK for Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Cache Rust dependencies
        uses: swatinem/rust-cache@v2
      - name: Install Rust toolchain with Android targets
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-linux-android,armv7-linux-androideabi,i686-linux-android,x86_64-linux-android
      - name: Setup Java
        uses: actions/setup-java@v4
        with: { distribution: 'temurin', java-version: '17' }
      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r26d
          link-to-sdk: true
      - name: Install frontend dependencies
        run: npm install
      - name: Install Tauri CLI
        run: npm install -D @tauri-apps/cli
      - name: Get Version from package.json
        id: get_version
        run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
      - name: Sync versions
        run: |
          VERSION=$(node -p "require('./package.json').version")
          node -e "
            const fs = require('fs');
            const tauriConfPath = './src-tauri/tauri.conf.json';
            const tauriConf = JSON.parse(fs.readFileSync(tauriConfPath, 'utf8'));
            tauriConf.version = '$VERSION';
            fs.writeFileSync(tauriConfPath, JSON.stringify(tauriConf, null, 2));
          "
          sed -i "s/^version = \".*\"/version = \"$VERSION\"/" ./src-tauri/Cargo.toml
      - name: Initialize Android project
        run: npm run tauri android init
        env:
          ANDROID_HOME: /usr/local/lib/android/sdk
          NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
      
      - name: Inject Custom Native Android Code
        shell: bash
        run: |
          echo "--- Injecting custom native files into Android plugin ---"
          PLUGIN_ANDROID_PATH="src-tauri/tauri-plugin-streamlockerplayer/android"
          
          # Define source and destination paths
          KOTLIN_SRC_PATH="src-android/java/com/plugin/streamlockerplayer"
          KOTLIN_DEST_PATH="$PLUGIN_ANDROID_PATH/src/main/java/com/plugin/streamlockerplayer"
          
          RES_SRC_PATH="src-android/res"
          RES_DEST_PATH="$PLUGIN_ANDROID_PATH/src/main/res"

          MANIFEST_SRC_PATH="src-android/AndroidManifest.xml"
          MANIFEST_DEST_PATH="$PLUGIN_ANDROID_PATH/src/main/AndroidManifest.xml"
          
          # Create the destination directory structure for Kotlin files
          mkdir -p $KOTLIN_DEST_PATH
          
          # Copy Kotlin files
          echo "Copying Kotlin source files..."
          cp -v $KOTLIN_SRC_PATH/*.kt $KOTLIN_DEST_PATH/
          
          # Copy resource files (layouts, drawables)
          echo "Copying resource files..."
          cp -vr $RES_SRC_PATH/* $RES_DEST_PATH/
          
          # Overwrite the plugin's manifest with our custom one
          echo "Overwriting AndroidManifest.xml..."
          cp -v $MANIFEST_SRC_PATH $MANIFEST_DEST_PATH
          
          echo "--- Native file injection complete ---"

      - name: Generate App Icons
        run: npm run tauri icon
      - name: Build Unsigned Android Project
        run: npm run tauri android build
        env:
          ANDROID_HOME: /usr/local/lib/android/sdk
          NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
      - name: Generate Android Signing Key
        run: |
          keytool -genkey -v \
            -keystore $RUNNER_TEMP/keystore.jks \
            -alias streamlocker \
            -keyalg RSA -keysize 2048 -validity 10000 \
            -storepass "${{ secrets.ANDROID_KEY_PASSWORD }}" \
            -keypass "${{ secrets.ANDROID_KEY_PASSWORD }}" \
            -dname "CN=streamlocker,O=streamlocker,C=XX"
      - name: Sign the APK with apksigner
        run: |
          APKSIGNER=$(find $ANDROID_HOME/build-tools -name "apksigner" | sort -r | head -n 1)
          $APKSIGNER sign --ks $RUNNER_TEMP/keystore.jks --ks-pass pass:"${{ secrets.ANDROID_KEY_PASSWORD }}" \
          src-tauri/gen/android/app/build/outputs/apk/universal/release/app-universal-release-unsigned.apk
      - name: Rename Android Artifacts
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          ARTIFACT_DIR="artifacts"
          mkdir -p $ARTIFACT_DIR
          mv src-tauri/gen/android/app/build/outputs/apk/universal/release/app-universal-release-unsigned.apk "$ARTIFACT_DIR/stream-locker-test-build.apk"
      - name: Upload Test APK as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: stream-locker-test-apk
          path: artifacts/stream-locker-test-build.apk
          retention-days: 7